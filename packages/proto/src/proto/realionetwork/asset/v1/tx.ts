/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: realionetwork/asset/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace realionetwork.asset.v1 {
    export class MsgCreateToken extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            manager?: string;
            name?: string;
            symbol?: string;
            total?: string;
            authorizationRequired?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("manager" in data && data.manager != undefined) {
                    this.manager = data.manager;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("authorizationRequired" in data && data.authorizationRequired != undefined) {
                    this.authorizationRequired = data.authorizationRequired;
                }
            }
        }
        get manager() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set manager(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set total(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get authorizationRequired() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set authorizationRequired(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            manager?: string;
            name?: string;
            symbol?: string;
            total?: string;
            authorizationRequired?: boolean;
        }): MsgCreateToken {
            const message = new MsgCreateToken({});
            if (data.manager != null) {
                message.manager = data.manager;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.authorizationRequired != null) {
                message.authorizationRequired = data.authorizationRequired;
            }
            return message;
        }
        toObject() {
            const data: {
                manager?: string;
                name?: string;
                symbol?: string;
                total?: string;
                authorizationRequired?: boolean;
            } = {};
            if (this.manager != null) {
                data.manager = this.manager;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.authorizationRequired != null) {
                data.authorizationRequired = this.authorizationRequired;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.manager.length)
                writer.writeString(1, this.manager);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.symbol.length)
                writer.writeString(3, this.symbol);
            if (this.total.length)
                writer.writeString(4, this.total);
            if (this.authorizationRequired != false)
                writer.writeBool(6, this.authorizationRequired);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateToken {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateToken();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.manager = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.symbol = reader.readString();
                        break;
                    case 4:
                        message.total = reader.readString();
                        break;
                    case 6:
                        message.authorizationRequired = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateToken {
            return MsgCreateToken.deserialize(bytes);
        }
    }
    export class MsgCreateTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgCreateTokenResponse {
            const message = new MsgCreateTokenResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateTokenResponse {
            return MsgCreateTokenResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateToken extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            manager?: string;
            symbol?: string;
            authorizationRequired?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("manager" in data && data.manager != undefined) {
                    this.manager = data.manager;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("authorizationRequired" in data && data.authorizationRequired != undefined) {
                    this.authorizationRequired = data.authorizationRequired;
                }
            }
        }
        get manager() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set manager(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get authorizationRequired() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set authorizationRequired(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            manager?: string;
            symbol?: string;
            authorizationRequired?: boolean;
        }): MsgUpdateToken {
            const message = new MsgUpdateToken({});
            if (data.manager != null) {
                message.manager = data.manager;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.authorizationRequired != null) {
                message.authorizationRequired = data.authorizationRequired;
            }
            return message;
        }
        toObject() {
            const data: {
                manager?: string;
                symbol?: string;
                authorizationRequired?: boolean;
            } = {};
            if (this.manager != null) {
                data.manager = this.manager;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.authorizationRequired != null) {
                data.authorizationRequired = this.authorizationRequired;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.manager.length)
                writer.writeString(1, this.manager);
            if (this.symbol.length)
                writer.writeString(2, this.symbol);
            if (this.authorizationRequired != false)
                writer.writeBool(3, this.authorizationRequired);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateToken {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateToken();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.manager = reader.readString();
                        break;
                    case 2:
                        message.symbol = reader.readString();
                        break;
                    case 3:
                        message.authorizationRequired = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateToken {
            return MsgUpdateToken.deserialize(bytes);
        }
    }
    export class MsgUpdateTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateTokenResponse {
            const message = new MsgUpdateTokenResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateTokenResponse {
            return MsgUpdateTokenResponse.deserialize(bytes);
        }
    }
    export class MsgAuthorizeAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            manager?: string;
            symbol?: string;
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("manager" in data && data.manager != undefined) {
                    this.manager = data.manager;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get manager() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set manager(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            manager?: string;
            symbol?: string;
            address?: string;
        }): MsgAuthorizeAddress {
            const message = new MsgAuthorizeAddress({});
            if (data.manager != null) {
                message.manager = data.manager;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                manager?: string;
                symbol?: string;
                address?: string;
            } = {};
            if (this.manager != null) {
                data.manager = this.manager;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.manager.length)
                writer.writeString(1, this.manager);
            if (this.symbol.length)
                writer.writeString(2, this.symbol);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgAuthorizeAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgAuthorizeAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.manager = reader.readString();
                        break;
                    case 2:
                        message.symbol = reader.readString();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgAuthorizeAddress {
            return MsgAuthorizeAddress.deserialize(bytes);
        }
    }
    export class MsgAuthorizeAddressResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgAuthorizeAddressResponse {
            const message = new MsgAuthorizeAddressResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgAuthorizeAddressResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgAuthorizeAddressResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgAuthorizeAddressResponse {
            return MsgAuthorizeAddressResponse.deserialize(bytes);
        }
    }
    export class MsgUnAuthorizeAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            manager?: string;
            symbol?: string;
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("manager" in data && data.manager != undefined) {
                    this.manager = data.manager;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get manager() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set manager(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            manager?: string;
            symbol?: string;
            address?: string;
        }): MsgUnAuthorizeAddress {
            const message = new MsgUnAuthorizeAddress({});
            if (data.manager != null) {
                message.manager = data.manager;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                manager?: string;
                symbol?: string;
                address?: string;
            } = {};
            if (this.manager != null) {
                data.manager = this.manager;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.manager.length)
                writer.writeString(1, this.manager);
            if (this.symbol.length)
                writer.writeString(2, this.symbol);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUnAuthorizeAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUnAuthorizeAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.manager = reader.readString();
                        break;
                    case 2:
                        message.symbol = reader.readString();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUnAuthorizeAddress {
            return MsgUnAuthorizeAddress.deserialize(bytes);
        }
    }
    export class MsgUnAuthorizeAddressResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUnAuthorizeAddressResponse {
            const message = new MsgUnAuthorizeAddressResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUnAuthorizeAddressResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUnAuthorizeAddressResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUnAuthorizeAddressResponse {
            return MsgUnAuthorizeAddressResponse.deserialize(bytes);
        }
    }
    export class MsgTransferToken extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            symbol?: string;
            from?: string;
            to?: string;
            amount?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            symbol?: string;
            from?: string;
            to?: string;
            amount?: string;
        }): MsgTransferToken {
            const message = new MsgTransferToken({});
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                symbol?: string;
                from?: string;
                to?: string;
                amount?: string;
            } = {};
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.symbol.length)
                writer.writeString(1, this.symbol);
            if (this.from.length)
                writer.writeString(2, this.from);
            if (this.to.length)
                writer.writeString(3, this.to);
            if (this.amount.length)
                writer.writeString(4, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferToken {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferToken();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.symbol = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        message.to = reader.readString();
                        break;
                    case 4:
                        message.amount = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferToken {
            return MsgTransferToken.deserialize(bytes);
        }
    }
    export class MsgTransferTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgTransferTokenResponse {
            const message = new MsgTransferTokenResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferTokenResponse {
            return MsgTransferTokenResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            CreateToken: {
                path: "/realionetwork.asset.v1.Msg/CreateToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgCreateToken) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgCreateToken.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgCreateTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgCreateTokenResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateToken: {
                path: "/realionetwork.asset.v1.Msg/UpdateToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateToken) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateToken.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateTokenResponse.deserialize(new Uint8Array(bytes))
            },
            AuthorizeAddress: {
                path: "/realionetwork.asset.v1.Msg/AuthorizeAddress",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgAuthorizeAddress) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgAuthorizeAddress.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgAuthorizeAddressResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgAuthorizeAddressResponse.deserialize(new Uint8Array(bytes))
            },
            UnAuthorizeAddress: {
                path: "/realionetwork.asset.v1.Msg/UnAuthorizeAddress",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUnAuthorizeAddress) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUnAuthorizeAddress.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUnAuthorizeAddressResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUnAuthorizeAddressResponse.deserialize(new Uint8Array(bytes))
            },
            TransferToken: {
                path: "/realionetwork.asset.v1.Msg/TransferToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgTransferToken) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgTransferToken.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgTransferTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgTransferTokenResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateToken(call: grpc_1.ServerUnaryCall<MsgCreateToken, MsgCreateTokenResponse>, callback: grpc_1.sendUnaryData<MsgCreateTokenResponse>): void;
        abstract UpdateToken(call: grpc_1.ServerUnaryCall<MsgUpdateToken, MsgUpdateTokenResponse>, callback: grpc_1.sendUnaryData<MsgUpdateTokenResponse>): void;
        abstract AuthorizeAddress(call: grpc_1.ServerUnaryCall<MsgAuthorizeAddress, MsgAuthorizeAddressResponse>, callback: grpc_1.sendUnaryData<MsgAuthorizeAddressResponse>): void;
        abstract UnAuthorizeAddress(call: grpc_1.ServerUnaryCall<MsgUnAuthorizeAddress, MsgUnAuthorizeAddressResponse>, callback: grpc_1.sendUnaryData<MsgUnAuthorizeAddressResponse>): void;
        abstract TransferToken(call: grpc_1.ServerUnaryCall<MsgTransferToken, MsgTransferTokenResponse>, callback: grpc_1.sendUnaryData<MsgTransferTokenResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateToken: GrpcUnaryServiceInterface<MsgCreateToken, MsgCreateTokenResponse> = (message: MsgCreateToken, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateTokenResponse>, callback?: grpc_1.requestCallback<MsgCreateTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateToken(message, metadata, options, callback);
        };
        UpdateToken: GrpcUnaryServiceInterface<MsgUpdateToken, MsgUpdateTokenResponse> = (message: MsgUpdateToken, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateTokenResponse>, callback?: grpc_1.requestCallback<MsgUpdateTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateToken(message, metadata, options, callback);
        };
        AuthorizeAddress: GrpcUnaryServiceInterface<MsgAuthorizeAddress, MsgAuthorizeAddressResponse> = (message: MsgAuthorizeAddress, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgAuthorizeAddressResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgAuthorizeAddressResponse>, callback?: grpc_1.requestCallback<MsgAuthorizeAddressResponse>): grpc_1.ClientUnaryCall => {
            return super.AuthorizeAddress(message, metadata, options, callback);
        };
        UnAuthorizeAddress: GrpcUnaryServiceInterface<MsgUnAuthorizeAddress, MsgUnAuthorizeAddressResponse> = (message: MsgUnAuthorizeAddress, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUnAuthorizeAddressResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUnAuthorizeAddressResponse>, callback?: grpc_1.requestCallback<MsgUnAuthorizeAddressResponse>): grpc_1.ClientUnaryCall => {
            return super.UnAuthorizeAddress(message, metadata, options, callback);
        };
        TransferToken: GrpcUnaryServiceInterface<MsgTransferToken, MsgTransferTokenResponse> = (message: MsgTransferToken, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgTransferTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgTransferTokenResponse>, callback?: grpc_1.requestCallback<MsgTransferTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.TransferToken(message, metadata, options, callback);
        };
    }
}
