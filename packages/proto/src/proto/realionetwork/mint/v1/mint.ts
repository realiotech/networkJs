// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: realionetwork/mint/v1/mint.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace realionetwork.mint.v1 {
    export class Minter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inflation?: string;
            annual_provisions?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inflation" in data && data.inflation != undefined) {
                    this.inflation = data.inflation;
                }
                if ("annual_provisions" in data && data.annual_provisions != undefined) {
                    this.annual_provisions = data.annual_provisions;
                }
            }
        }
        get inflation() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set inflation(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get annual_provisions() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set annual_provisions(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            inflation?: string;
            annual_provisions?: string;
        }): Minter {
            const message = new Minter({});
            if (data.inflation != null) {
                message.inflation = data.inflation;
            }
            if (data.annual_provisions != null) {
                message.annual_provisions = data.annual_provisions;
            }
            return message;
        }
        toObject() {
            const data: {
                inflation?: string;
                annual_provisions?: string;
            } = {};
            if (this.inflation != null) {
                data.inflation = this.inflation;
            }
            if (this.annual_provisions != null) {
                data.annual_provisions = this.annual_provisions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inflation.length)
                writer.writeString(1, this.inflation);
            if (this.annual_provisions.length)
                writer.writeString(2, this.annual_provisions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Minter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Minter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.inflation = reader.readString();
                        break;
                    case 2:
                        message.annual_provisions = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Minter {
            return Minter.deserialize(bytes);
        }
    }
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mint_denom?: string;
            inflation_rate?: string;
            blocks_per_year?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mint_denom" in data && data.mint_denom != undefined) {
                    this.mint_denom = data.mint_denom;
                }
                if ("inflation_rate" in data && data.inflation_rate != undefined) {
                    this.inflation_rate = data.inflation_rate;
                }
                if ("blocks_per_year" in data && data.blocks_per_year != undefined) {
                    this.blocks_per_year = data.blocks_per_year;
                }
            }
        }
        get mint_denom() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mint_denom(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inflation_rate() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set inflation_rate(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get blocks_per_year() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set blocks_per_year(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            mint_denom?: string;
            inflation_rate?: string;
            blocks_per_year?: number;
        }): Params {
            const message = new Params({});
            if (data.mint_denom != null) {
                message.mint_denom = data.mint_denom;
            }
            if (data.inflation_rate != null) {
                message.inflation_rate = data.inflation_rate;
            }
            if (data.blocks_per_year != null) {
                message.blocks_per_year = data.blocks_per_year;
            }
            return message;
        }
        toObject() {
            const data: {
                mint_denom?: string;
                inflation_rate?: string;
                blocks_per_year?: number;
            } = {};
            if (this.mint_denom != null) {
                data.mint_denom = this.mint_denom;
            }
            if (this.inflation_rate != null) {
                data.inflation_rate = this.inflation_rate;
            }
            if (this.blocks_per_year != null) {
                data.blocks_per_year = this.blocks_per_year;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mint_denom.length)
                writer.writeString(1, this.mint_denom);
            if (this.inflation_rate.length)
                writer.writeString(2, this.inflation_rate);
            if (this.blocks_per_year != 0)
                writer.writeUint64(3, this.blocks_per_year);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mint_denom = reader.readString();
                        break;
                    case 2:
                        message.inflation_rate = reader.readString();
                        break;
                    case 3:
                        message.blocks_per_year = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
}
